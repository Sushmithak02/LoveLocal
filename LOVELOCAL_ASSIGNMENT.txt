ASSIGNMENT QUESTIONS


NAME: SUSHMITHA
EMAIL: sushmitha.shervegar@gmail.com
mob: 7204963682
St Joseph Engineering College -MANGLORE
====================================
1) EASY 1
Given a string s consisting of words and spaces, return the length of the last word in the string.
A word is a maximal 
substring consisting of non-space characters only.
 
Example 1:
Input: s = "Hello World"
Output: 5
Explanation: The last word is "World" with length 5.
-------------------------------------------------------
JAVA CODE:

import java.util.Scanner;
class easy1{
  public static void main(String[] args){
    Scanner sc=new Scanner(System.in);
    String str=sc.nextLine();             //"luffy is still joyboy";
                                          //split the string str based on space through which they are separated
    String[] s=str.split(" ");
    int n=s.length;                      //finding the length of a string bcz the last word can be easily taken for calculations
    String fin=s[n-1];
    int res=fin.length();
    System.out.print(res);
  }
}
============================================================================
2)MEDIUM 1
Given a binary search tree (BST), find the lowest common ancestor (LCA) node of two given nodes in the BST.
-------------------------------------------
JAVA CODE:

import javax.swing.tree.TreeNode;

class Node {
    int data;
    Node left, right;
    public Node(int item) {
        data = item;
        left = right = null;
    }
}

class medium1 {
    Node root;
                                                           //recursive implementation
                                                          //bcz it provide code simplicity as well as code reusablility
    Node lca(Node node, int n1, int n2) {
        if (node == null)
            return null;
                                                        //on comaparing with root node
                                                       //two posibility n1 and n2 can be greater than node or lesser
        if (node.data > n1 && node.data > n2)
            return lca(node.left, n1, n2);
        if (node.data < n1 && node.data < n2)
            return lca(node.right, n1, n2);
        return node;
    }
    public static void main(String args[]) {
      medium1 tree = new medium1();                // defining the binary tree considering it as given in preorder form
      tree.root = new Node(6);
  
      tree.root.left = new Node(2);
      tree.root.right = new Node(8);
      
      tree.root.left.left = new Node(0);
      tree.root.left.right = new Node(4);
      
      tree.root.right.left = new Node(7);
      tree.root.right.right = new Node(9);
  
      tree.root.left.right.left = new Node(3);
      tree.root.left.right.right = new Node(5);

        int n1 = 2, n2 = 4;
        Node t = tree.lca(tree.root, n1, n2);
        System.out.println("LCA="+ t.data);
       if(t.data==n1){
        System.out.print(" node can be a descendant of itself ");
       }
    }
}
======================================================================
3) HARD1

Return the max sliding window.
-------------------------------
JAVA CODE:

import java.util.Arrays;

class hard1{
      public static void main(String[] args){
        int[] nums={1,3,-1,-3,5,3,6,7};

        int k=3;//sc.nextInt();
       
        int n = nums.length;
        int[] result = new int[n - k + 1];
        for (int i = 0; i <= n - k; i++) {
            int max = nums[i];
            for (int j = i + 1; j < i + k; j++) {
                if (nums[j] > max) {
                    max = nums[j];
                }
            }
            result[i] = max;
        }
        System.out.print(Arrays.toString(result));
    }
}
==================================================================================
4)HARD 3

Given an integer n, count the total number of digit 1 appearing in all non-negative integers less than or equal to n.
-----------------------------------------------
JAVA CODE:

class hard3 {
  public static void main(String[] args){
    int n=13;
    int count = 0;
      if (n <= 0) {
          count=0;
      }
      
      for (int i = 1; i <= n; i++) {
          String str = Integer.toString(i);
          for (int j = 0; j < str.length(); j++) {
              if (str.charAt(j) == '1') {
                  count++;
              }
          }
      }
      System.out.print(count);
  }
}
===================================================================================================


